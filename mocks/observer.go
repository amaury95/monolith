// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/amaury95/monolith (interfaces: Observer)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	observer "github.com/amaury95/monolith/observer"
	gomock "github.com/golang/mock/gomock"
)

// MockObserver is a mock of Observer interface.
type MockObserver struct {
	ctrl     *gomock.Controller
	recorder *MockObserverMockRecorder
}

// MockObserverMockRecorder is the mock recorder for MockObserver.
type MockObserverMockRecorder struct {
	mock *MockObserver
}

// NewMockObserver creates a new mock instance.
func NewMockObserver(ctrl *gomock.Controller) *MockObserver {
	mock := &MockObserver{ctrl: ctrl}
	mock.recorder = &MockObserverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObserver) EXPECT() *MockObserverMockRecorder {
	return m.recorder
}

// Emit mocks base method.
func (m *MockObserver) Emit(arg0 *observer.Event[string]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Emit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Emit indicates an expected call of Emit.
func (mr *MockObserverMockRecorder) Emit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Emit", reflect.TypeOf((*MockObserver)(nil).Emit), arg0)
}

// Subscribe mocks base method.
func (m *MockObserver) Subscribe(arg0 string, arg1 observer.Processor[string]) observer.SourceID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", arg0, arg1)
	ret0, _ := ret[0].(observer.SourceID)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockObserverMockRecorder) Subscribe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockObserver)(nil).Subscribe), arg0, arg1)
}

// Unsubscribe mocks base method.
func (m *MockObserver) Unsubscribe(arg0 observer.SourceID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unsubscribe", arg0)
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockObserverMockRecorder) Unsubscribe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockObserver)(nil).Unsubscribe), arg0)
}
