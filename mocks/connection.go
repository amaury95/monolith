// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/amaury95/monolith (interfaces: IConnection)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
)

// MockIConnection is a mock of IConnection interface.
type MockIConnection struct {
	ctrl     *gomock.Controller
	recorder *MockIConnectionMockRecorder
}

// MockIConnectionMockRecorder is the mock recorder for MockIConnection.
type MockIConnectionMockRecorder struct {
	mock *MockIConnection
}

// NewMockIConnection creates a new mock instance.
func NewMockIConnection(ctrl *gomock.Controller) *MockIConnection {
	mock := &MockIConnection{ctrl: ctrl}
	mock.recorder = &MockIConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIConnection) EXPECT() *MockIConnectionMockRecorder {
	return m.recorder
}

// GetConnection mocks base method.
func (m *MockIConnection) GetConnection(arg0 context.Context) (*sqlx.DB, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnection", arg0)
	ret0, _ := ret[0].(*sqlx.DB)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetConnection indicates an expected call of GetConnection.
func (mr *MockIConnectionMockRecorder) GetConnection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnection", reflect.TypeOf((*MockIConnection)(nil).GetConnection), arg0)
}
